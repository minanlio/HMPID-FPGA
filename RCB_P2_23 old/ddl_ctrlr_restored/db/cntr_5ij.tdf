--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Stratix II" lpm_avalue=2 lpm_modulus=0 lpm_port_updown="PORT_UNUSED" lpm_width=11 aset clk_en clock q CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 6.1 cbx_cycloneii 2006:09:29:19:03:26:SJ cbx_lpm_add_sub 2006:10:10:22:03:24:SJ cbx_lpm_compare 2006:04:25:14:54:12:SJ cbx_lpm_counter 2006:11:07:16:43:46:SJ cbx_lpm_decode 2006:04:25:15:10:18:SJ cbx_mgl 2006:10:27:16:08:48:SJ cbx_stratix 2006:09:18:10:47:42:SJ cbx_stratixii 2006:10:13:14:01:30:SJ  VERSION_END


--  Copyright (C) 1991-2006 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION stratixii_lcell_comb (cin, dataa, datab, datac, datad, datae, dataf, datag, sharein)
WITH ( 	EXTENDED_LUT,	LUT_MASK,	SHARED_ARITH) 
RETURNS ( combout, cout, shareout, sumout);
FUNCTION stratixii_lcell_ff (aclr, adatasdata, aload, clk, datain, ena, sclr, sload)
RETURNS ( regout);

--synthesis_resources = lut 11 reg 11 
SUBDESIGN cntr_5ij
( 
	aset	:	input;
	clk_en	:	input;
	clock	:	input;
	q[10..0]	:	output;
) 
VARIABLE 
	counter_comb_bita0 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "000000000000AAAA",
			SHARED_ARITH = "OFF"
		);
	counter_comb_bita1 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "0000555500003333",
			SHARED_ARITH = "OFF"
		);
	counter_comb_bita2 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "0000555500003333",
			SHARED_ARITH = "OFF"
		);
	counter_comb_bita3 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "0000555500003333",
			SHARED_ARITH = "OFF"
		);
	counter_comb_bita4 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "0000555500003333",
			SHARED_ARITH = "OFF"
		);
	counter_comb_bita5 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "0000555500003333",
			SHARED_ARITH = "OFF"
		);
	counter_comb_bita6 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "0000555500003333",
			SHARED_ARITH = "OFF"
		);
	counter_comb_bita7 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "0000555500003333",
			SHARED_ARITH = "OFF"
		);
	counter_comb_bita8 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "0000555500003333",
			SHARED_ARITH = "OFF"
		);
	counter_comb_bita9 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "0000555500003333",
			SHARED_ARITH = "OFF"
		);
	counter_comb_bita10 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "OFF",
			LUT_MASK = "0000555500003333",
			SHARED_ARITH = "OFF"
		);
	counter_reg_bit1a[10..0] : stratixii_lcell_ff;
	a_val[10..0]	: WIRE;
	aclr_actual	: WIRE;
	cnt_en	: NODE;
	data[10..0]	: NODE;
	external_cin	: WIRE;
	lsb_cin	: WIRE;
	s_val[10..0]	: WIRE;
	safe_q[10..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	sset	: NODE;
	sync_data_wire[10..0]	: WIRE;
	sync_select_wire	: WIRE;
	updown_dir	: WIRE;
	updown_lsb	: WIRE;
	updown_other_bits	: WIRE;

BEGIN 
	counter_comb_bita[10..0].cin = ( counter_comb_bita[9..0].cout, lsb_cin);
	counter_comb_bita[10..0].dataa = ( counter_reg_bit1a[10..0].regout);
	counter_comb_bita[10..0].datab = ( updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_other_bits, updown_lsb);
	counter_reg_bit1a[].aclr = aclr_actual;
	counter_reg_bit1a[].adatasdata = a_val[];
	counter_reg_bit1a[].aload = aset;
	counter_reg_bit1a[].clk = clock;
	counter_reg_bit1a[].datain = ( ((sync_select_wire & sync_data_wire[10..10]) # ((! sync_select_wire) & counter_comb_bita[10].sumout)), ((sync_select_wire & sync_data_wire[9..9]) # ((! sync_select_wire) & counter_comb_bita[9].sumout)), ((sync_select_wire & sync_data_wire[8..8]) # ((! sync_select_wire) & counter_comb_bita[8].sumout)), ((sync_select_wire & sync_data_wire[7..7]) # ((! sync_select_wire) & counter_comb_bita[7].sumout)), ((sync_select_wire & sync_data_wire[6..6]) # ((! sync_select_wire) & counter_comb_bita[6].sumout)), ((sync_select_wire & sync_data_wire[5..5]) # ((! sync_select_wire) & counter_comb_bita[5].sumout)), ((sync_select_wire & sync_data_wire[4..4]) # ((! sync_select_wire) & counter_comb_bita[4].sumout)), ((sync_select_wire & sync_data_wire[3..3]) # ((! sync_select_wire) & counter_comb_bita[3].sumout)), ((sync_select_wire & sync_data_wire[2..2]) # ((! sync_select_wire) & counter_comb_bita[2].sumout)), ((sync_select_wire & sync_data_wire[1..1]) # ((! sync_select_wire) & counter_comb_bita[1].sumout)), ((sync_select_wire & sync_data_wire[0..0]) # ((! sync_select_wire) & counter_comb_bita[0].sumout)));
	counter_reg_bit1a[].ena = (clk_en & (((cnt_en # sclr) # sset) # sload));
	counter_reg_bit1a[].sclr = sclr;
	a_val[] = B"00000000010";
	aclr_actual = B"0";
	cnt_en = VCC;
	data[] = GND;
	external_cin = B"1";
	lsb_cin = B"0";
	q[] = safe_q[];
	s_val[] = B"11111111111";
	safe_q[] = counter_reg_bit1a[].regout;
	sclr = GND;
	sload = GND;
	sset = GND;
	sync_data_wire[] = ((sset & s_val[]) # ((! sset) & data[]));
	sync_select_wire = (sset # sload);
	updown_dir = B"1";
	updown_lsb = updown_dir;
	updown_other_bits = ((! external_cin) # updown_dir);
END;
--VALID FILE
