--  
-- MODULO PER EFFETTUARE IL RESET DA DDL DEL FIRMWARE
--

SUBDESIGN DDL_SOFT_RESET_MODULE
(
		CLOCK: INPUT;
		RESETn: INPUT;
		-- ddlctrlr.tdf
		ENA_RESET_MODULE: INPUT; 
		RESET_LENGHT[7..0]: INPUT;	
		
		DDL_RESETn: OUTPUT; 
		-- ddlctrlr.tdf
		CLR_RESET_MODULE: OUTPUT; -- indica che il reset Ã¨ terminato
		
		
)

variable

RESET_COUNTER[26..0]: DFFE;
RESET_LENGHT_REG[7..0]: DFFE;
CLRN_RESET_COUNTER: NODE;
ENA_RESET_COUNTER: NODE;
ENA_RESET_LENGHT_REG: NODE;


	MODULE_SM :	MACHINE OF BITS (QB[1..0]) WITH STATES (

					IDLE,
					LOAD_RESET_LENGHT_REG,
					LOAD_RESET_LENGHT_REG1,
					RESET_STATE,
					FINAL_STATE
					
				);

				
BEGIN		

DEFAULTS

CLRN_RESET_COUNTER = VCC;
ENA_RESET_COUNTER = GND;
ENA_RESET_LENGHT_REG = GND;
DDL_RESETn = VCC;	
CLR_RESET_MODULE = GND;
	
END DEFAULTS;


RESET_COUNTER[26..0].d = RESET_COUNTER[26..0].q + 1;
RESET_COUNTER[26..0].clk = !CLOCK;
RESET_COUNTER[26..0].ena = ENA_RESET_COUNTER;
RESET_COUNTER[26..0].clrn = RESETn AND CLRN_RESET_COUNTER;

RESET_LENGHT_REG[7..0].d = RESET_LENGHT[7..0];
RESET_LENGHT_REG[7..0].clk = !CLOCK;
RESET_LENGHT_REG[7..0].ena = ENA_RESET_LENGHT_REG;
RESET_LENGHT_REG[7..0].clrn = RESETn;

MODULE_SM.clk = CLOCK; 
MODULE_SM.reset = !RESETn;



CASE MODULE_SM is 

	WHEN IDLE => 
		DDL_RESETn = VCC;
		IF ENA_RESET_MODULE THEN  
			MODULE_SM = LOAD_RESET_LENGHT_REG; 
		ELSE
			MODULE_SM = IDLE; 
		END IF;
		
	WHEN LOAD_RESET_LENGHT_REG =>
		DDL_RESETn = VCC;
		CLRN_RESET_COUNTER = GND;
		ENA_RESET_LENGHT_REG = VCC;	
		MODULE_SM = LOAD_RESET_LENGHT_REG1;
	
	WHEN LOAD_RESET_LENGHT_REG1 =>
		DDL_RESETn = VCC;
		CLRN_RESET_COUNTER = VCC;
		ENA_RESET_LENGHT_REG = GND;
		MODULE_SM = RESET_STATE; 	
		
	WHEN RESET_STATE =>
		ENA_RESET_COUNTER = VCC;
		DDL_RESETn = GND;
		IF (RESET_COUNTER[26..0] == (RESET_LENGHT_REG[7..0], H"FFFF", B"111")) THEN	
			MODULE_SM = FINAL_STATE;
		ELSE
			MODULE_SM = RESET_STATE;
		END IF; 
			
	WHEN FINAL_STATE =>
		ENA_RESET_COUNTER = GND;
		CLRN_RESET_COUNTER = GND;
		DDL_RESETn = VCC;
		CLR_RESET_MODULE = VCC;
		IF ENA_RESET_MODULE THEN
			MODULE_SM = FINAL_STATE;
		ELSE
			MODULE_SM = IDLE;
		END IF;
		
	END CASE;

END;
